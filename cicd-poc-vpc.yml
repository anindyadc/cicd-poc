AWSTemplateFormatVersion: '2010-09-09'
Description: CI/CD POC with GitHub, ECR, ECS, EC2 NGINX, ALB, and VPC setup

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro

Resources:

  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: poc-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-2

  Subnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ECS and Networking Resources (same as before)
  ECRActivity:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: activity-app

  ECRAttendance:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: attendance-app

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: cicd-poc-cluster

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS task access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: cicd-poc-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: [!Ref ALBSecurityGroup]
      Scheme: internet-facing

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            ContentType: text/plain
            MessageBody: ALB running

  ActivityTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /

  AttendanceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /

  ActivityListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values: ["/activity/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ActivityTargetGroup

  AttendanceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 20
      Conditions:
        - Field: path-pattern
          Values: ["/attendance/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AttendanceTargetGroup

  ActivityTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: activity-task
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: activity
          Image: !Sub "${ECRActivity.RepositoryUri}:latest"
          PortMappings:
            - ContainerPort: 3000

  AttendanceTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: attendance-task
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: attendance
          Image: !Sub "${ECRAttendance.RepositoryUri}:latest"
          PortMappings:
            - ContainerPort: 3000

  ActivityService:
    Type: AWS::ECS::Service
    DependsOn: ActivityListenerRule
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      TaskDefinition: !Ref ActivityTaskDef
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups: [!Ref ECSSecurityGroup]
      LoadBalancers:
        - ContainerName: activity
          ContainerPort: 3000
          TargetGroupArn: !Ref ActivityTargetGroup

  AttendanceService:
    Type: AWS::ECS::Service
    DependsOn: AttendanceListenerRule
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      TaskDefinition: !Ref AttendanceTaskDef
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups: [!Ref ECSSecurityGroup]
      LoadBalancers:
        - ContainerName: attendance
          ContainerPort: 3000
          TargetGroupArn: !Ref AttendanceTargetGroup

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-02b3c03c6fadb6e2c
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: [!Ref ALBSecurityGroup]
      KeyName: myintellinux
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install nginx1 -y
          systemctl start nginx
          systemctl enable nginx
          cat > /etc/nginx/nginx.conf << 'EOF'
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log warn;
          pid /var/run/nginx.pid;
          events {
              worker_connections 1024;
          }
          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              sendfile        on;
              keepalive_timeout  65;
              server {
                  listen 80;
                  server_name _;
                  location /activity/ {
                      proxy_pass         http://${ALB.DNSName}/activity/;
                      proxy_http_version 1.1;
                      proxy_set_header   Host $host;
                      proxy_set_header   X-Real-IP $remote_addr;
                      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header   X-Forwarded-Proto $scheme;
                  }
                  location /attendance/ {
                      proxy_pass         http://${ALB.DNSName}/attendance/;
                      proxy_http_version 1.1;
                      proxy_set_header   Host $host;
                      proxy_set_header   X-Real-IP $remote_addr;
                      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header   X-Forwarded-Proto $scheme;
                  }
                  location / {
                      return 200 'NGINX proxy running. Try /activity or /attendance';
                  }
              }
          }
          EOF
          systemctl restart nginx

Outputs:
  VPCId:
    Description: Created VPC ID
    Value: !Ref VPC

  ALBDNS:
    Description: DNS of the Application Load Balancer
    Value: !GetAtt ALB.DNSName

  EC2PublicIP:
    Description: EC2 Public IP
    Value: !GetAtt EC2Instance.PublicIp